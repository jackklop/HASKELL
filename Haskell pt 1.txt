module Project1 where
import Data.List
import System.IO
import Data.Char

-- triples returns the number of items in a list that are divisible by 3.
--
-- > triples [1,2,3,4,5,6]
-- 2
-- > triples [3,33,333]
-- 3
-- > triples [0,1,4]
-- 1

triples :: [Integer] -> Integer
triples [] = 0
--recursively check if each is divisble by 3 and adds 1 every time if true
triples (x:xs) = if x `mod` 3 == 0
		 then 1 + triples xs
		 else triples xs

-- The hailstone sequence takes a positive number n and repeatedly applies
-- this transformation: if n is even, it divides n by 2; otherwise, it
-- multiplies n by 3 and adds one. The sequence ends when it reaches 1.
--
-- hailstone returns the complete sequence beginning with a particular number.
-- You may assume that the number is positive.
--
-- > hailstone 4
-- [4,2,1]
-- > hailstone 6
-- [6,3,10,5,16,8,4,2,1]
-- > hailstone 7
-- [7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1]

hailstone :: Integer -> [Integer]
hailstone x | x == 1    = [1] 
            | even x    = x : hailstone (x `div` 2)
            | otherwise = x : hailstone (3 * x + 1)

data Point = Pt Double Double deriving (Show, Eq)

-- The centroid of a list of points is a point whose x (and y) coordinates are
-- the means of the x (and y) coordinates of the points in the list.
--
-- You may assume the list contains at least one point.
--
-- > centroid [Pt 1 1, Pt 2 2]
-- Pt 1.5 1.5
-- > centroid [Pt (-1.5) 0, Pt 3 2, Pt 0 1]
-- Pt 0.5 1.0

centroid :: [Point] -> Point
centroid = undefined

data Tree a = Tip | Bin (Tree a) a (Tree a) deriving (Show, Eq, Ord)


-- mirror returns a tree with the same shape and contents as its argument, but
-- flipped left for right.
--
-- > mirror (Bin (Bin Tip 1 (Bin Tip 2 Tip)) 3 Tip)
-- Bin Tip 3 (Bin (Bin Tip 2 Tip) 1 Tip)

mirror :: Tree a -> Tree a
mirror Tip = Tip
mirror (Bin tL x tR) = Bin (mirror tR) x (mirror tL)

-- In a strictly binary tree, each node has either 0 children or 2 children.
--
-- > strict (Bin Tip 1 Tip)
-- True
-- > strict (Bin Tip 1 (Bin Tip 2 Tip))
-- False

isTip :: Tree a -> Int
isTip Tip = 1
isTip _ = 0

strict :: Tree a -> Bool 
strict Tip = True
strict (Bin l _ r) | not (strict l) = False
                   | not (strict r) = False
		   |(strict l) /= (strict r) = False
                   |otherwise = True

-- A tree is near balanced if the left and right sub-trees of each node differ
-- in height by at most 1.
--
-- > near_balanced (Bin Tip 1 (Bin Tip 2 Tip))
-- True
-- > near_balanced (Bin Tip 1 (Bin Tip 2 (Bin Tip 3 Tip)))
-- False
-- > near_balanced (Bin (Bin Tip 2 Tip) 1 (Bin Tip 2 (Bin Tip 3 Tip)))
-- True
-- > near_balanced (Bin (Bin Tip 2 Tip) 1 (Bin Tip 2 (Bin (Bin Tip 4 Tip) 3 Tip)))
-- False


--height :: (Ord a, Num a) => Tree a -> a
height Tip = -1
height (Bin l _ r) = 1 + ((height l) `max` (height r))

--near_balanced :: (Ord a, Num a) => Tree a -> Bool 
near_balanced Tip = True
near_balanced (Bin l _ r) | not (near_balanced l) = False
                          | not (near_balanced r) = False
                          | abs ((height l) - (height r)) > 1 = False
                          | otherwise = True